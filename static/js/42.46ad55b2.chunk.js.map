{"version":3,"file":"static/js/42.46ad55b2.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactListItem/ContactListItem.styled.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/ContactList/ContactList.jsx","components/App.styled.jsx","views/ContactsView.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n  border: 1px solid #afb1b8;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  padding: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 24px;\n  color: #212121;\n  margin-bottom: 20px;\n`;\n\nexport const FormInput = styled.input`\n  margin-top: 5px;\n  height: 30px;\n  font-size: 24px;\n  padding-left: 5px;\n\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  outline: none;\n  cursor: pointer;\n\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :focus {\n    border: 1px solid #2196f3;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px 32px;\n  font-size: 16px;\n  cursor: pointer;\n  color: white;\n  background-color: #2196f3;\n  border-radius: 4px;\n  border: 1px solid transparent;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :not(:last-child) {\n    margin-right: 10px;\n  }\n  :hover,\n  :focus {\n    background-color: #188ce8;\n  }\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  Button,\n  FormContainer,\n  FormInput,\n  FormLabel,\n} from './ContactForm.styled';\nimport { usePhonebook } from 'redux/phonebook/phonebookSlice';\n\nexport const ContactForm = () => {\n  const { contacts, addContact } = usePhonebook();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleNameChange = e => {\n    setName(e.currentTarget.value);\n  };\n\n  const handleNumberChange = e => {\n    setNumber(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (\n      contacts.some(\n        contactItem => contactItem.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contacts`);\n    }\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    addContact(contact);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n      <FormLabel htmlFor={nameInputId}>\n        Name\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleNameChange}\n          value={name}\n          id={nameInputId}\n        ></FormInput>\n      </FormLabel>\n      <FormLabel htmlFor={numberInputId}>\n        Number\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleNumberChange}\n          value={number}\n          id={numberInputId}\n        ></FormInput>\n      </FormLabel>\n      <Button type=\"submit\">Add contact</Button>\n    </FormContainer>\n  );\n};\n\n// export class ContactForm extends Component {\n//   static propTypes = {\n//     addContact: PropTypes.func.isRequired,\n//   };\n\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = nanoid();\n//   numberInputId = nanoid();\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     const { name, number } = this.state;\n//     const { addContact } = this.props;\n//     const { resetForm } = this;\n//     e.preventDefault();\n//     addContact(name, number);\n//     resetForm();\n//   };\n\n//   resetForm = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     const { handleChange, handleSubmit, nameInputId, numberInputId } = this;\n//     return (\n//       <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n//         <FormLabel htmlFor={nameInputId}>\n//           Name\n//           <FormInput\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             onChange={handleChange}\n//             value={name}\n//             id={nameInputId}\n//           ></FormInput>\n//         </FormLabel>\n//         <FormLabel htmlFor={numberInputId}>\n//           Number\n//           <FormInput\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//             onChange={handleChange}\n//             value={number}\n//             id={numberInputId}\n//           ></FormInput>\n//         </FormLabel>\n//         <Button type=\"submit\">Add contact</Button>\n//       </FormContainer>\n//     );\n//   }\n// }\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  font-size: 20px;\n  color: #212121;\n`;\n\nexport const FilterInput = styled.input`\n  margin-left: 10px;\n  margin-top: 5px;\n  height: 20px;\n  font-size: 18px;\n  padding-left: 5px;\n\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  outline: none;\n  cursor: pointer;\n\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :focus {\n    border: 1px solid #2196f3;\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { FilterInput, FilterLabel } from './Filter.styled';\nimport { usePhonebook } from 'redux/phonebook/phonebookSlice';\n\nexport const Filter = () => {\n  const { filter, changeFilter } = usePhonebook();\n  const filterInputId = nanoid();\n  return (\n    <FilterLabel htmlFor={filterInputId}>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n        id={filterInputId}\n      ></FilterInput>\n    </FilterLabel>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListItemBlock = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 24px;\n`;\n\nexport const ContactItemText = styled.p``;\n\nexport const Button = styled.button`\n  height: 32px;\n  cursor: pointer;\n  color: white;\n  background-color: #2196f3;\n  border-radius: 4px;\n  border: 1px solid transparent;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :not(:last-child) {\n    margin-right: 10px;\n  }\n  :hover,\n  :focus {\n    background-color: #188ce8;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport {\n  ContactListItemBlock,\n  ContactItemText,\n  Button,\n} from './ContactListItem.styled';\n\nexport const ContactListItem = ({ name, number, id, deleteContact }) => {\n  return (\n    <ContactListItemBlock>\n      <ContactItemText>\n        {name}: {number}\n      </ContactItemText>\n      <Button type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </Button>\n    </ContactListItemBlock>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListContainer = styled.ul`\n  border: 1px solid #afb1b8;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  padding: 20px;\n  list-style: none;\n`;\n","import styled from '@emotion/styled';\n\nexport const NotificationMessage = styled.p`\n  text-align: center;\n  margin-top: 50px;\n  font-size: 24px;\n  font-weight: bold;\n  color: #212121;\n`;\n","import PropTypes from 'prop-types';\nimport { NotificationMessage } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <NotificationMessage>{message}</NotificationMessage>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { ContactListItem } from './ContactListItem/ContactListItem';\nimport { ContactListContainer } from './ContactList.styled';\nimport { usePhonebook } from 'redux/phonebook/phonebookSlice';\nimport { Notification } from 'components/Notification/Notification';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/phonebook/phonebookOperations';\nimport Loader from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  const { contacts, filter, deleteContact, isLoading } = usePhonebook();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const promise = dispatch(getContacts());\n    return () => {\n      promise.abort();\n    };\n  }, [dispatch, filter]);\n\n  const filterContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  const visibleContacts = filterContacts();\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {contacts.length && visibleContacts.length && !isLoading ? (\n        <ContactListContainer>\n          {visibleContacts.map(({ id, name, number }) => {\n            return (\n              <ContactListItem\n                key={id}\n                id={id}\n                name={name}\n                number={number}\n                deleteContact={deleteContact}\n              />\n            );\n          })}\n        </ContactListContainer>\n      ) : (\n        !isLoading && <Notification message=\"List is empty\" />\n      )}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 500px;\n  margin: 0 auto;\n  margin-top: 20px;\n`;\n\nexport const MainTitle = styled.h1`\n  color: #212121;\n`;\n\nexport const SubTitle = styled.h1`\n  color: #757575;\n`;\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { MainTitle, SubTitle } from '../components/App.styled';\nimport { usePhonebook } from 'redux/phonebook/phonebookSlice';\nimport Container from '@mui/material/Container';\n\nconst ContactsView = () => {\n  const { contacts } = usePhonebook();\n\n  return (\n    <Container>\n      <MainTitle>Phonebook</MainTitle>\n      <ContactForm />\n      <SubTitle>Contacts</SubTitle>\n      {contacts.length >= 1 && <Filter />}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactsView;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","FormContainer","styled","FormLabel","FormInput","Button","ContactForm","usePhonebook","contacts","addContact","useState","name","setName","number","setNumber","nameInputId","numberInputId","resetForm","autoComplete","onSubmit","e","preventDefault","some","contactItem","toLowerCase","alert","contact","htmlFor","type","pattern","title","required","onChange","currentTarget","value","FilterLabel","FilterInput","Filter","filter","changeFilter","filterInputId","ContactListItemBlock","ContactItemText","ContactListItem","deleteContact","onClick","ContactListContainer","NotificationMessage","Notification","message","ContactList","isLoading","dispatch","useDispatch","useEffect","promise","getContacts","abort","visibleContacts","normalizeFilter","includes","filterContacts","Loader","length","map","MainTitle","SubTitle"],"sourceRoot":""}