{"version":3,"file":"static/js/190.501e9e1c.chunk.js","mappings":"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","sources":["components/PasswordField/PasswordField.jsx","components/RegisterForm/validation.js","components/RegisterForm/RegisterForm.jsx","views/RegisterView.jsx"],"sourcesContent":["import {\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  FormHelperText,\n} from '@mui/material';\nimport React from 'react';\nimport { VisibilityOff, Visibility } from '@mui/icons-material';\n\nconst PasswordField = ({\n  label,\n  id,\n  isSubmitting,\n  showPassword,\n  value,\n  onChange,\n  handleClickShowPassword,\n  formikToched,\n  formikErrors,\n}) => {\n  return (\n    <FormControl fullWidth variant=\"outlined\" style={{ marginTop: '10px' }}>\n      <InputLabel htmlFor=\"outlined-adornment-password\">{label}</InputLabel>\n      <OutlinedInput\n        disabled={isSubmitting}\n        id={id}\n        type={showPassword ? 'text' : 'password'}\n        value={value}\n        onChange={onChange}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleClickShowPassword}\n              edge=\"end\"\n            >\n              {!showPassword ? <VisibilityOff /> : <Visibility />}\n            </IconButton>\n          </InputAdornment>\n        }\n        label={label}\n        error={formikToched && Boolean(formikErrors)}\n      />\n      <FormHelperText id=\"my-helper-text\" error>\n        {formikToched && formikErrors}\n      </FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default PasswordField;\n","import * as yup from 'yup';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('Enter a valid email')\n    .required('Email is required'),\n  fullName: yup\n    .string()\n    .matches(\n      /^[A-Z][a-z]*(\\s[A-Z][a-z]*)+$|^[А-Я][а-я]*(\\s[А-я][а-я]*)+$/gms,\n      'Please enter your full name as in example: John Johnson (Іван Іващенко)',\n    )\n    .required('Full name is required'),\n  password: yup\n    .string()\n    .min(12, 'Password should be of minimum 12 characters length')\n    .required('Password is required'),\n});\n\nexport default validationSchema;\n","import { useState } from 'react';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { Button, TextField, Typography } from '@mui/material';\nimport validationSchema from './validation';\nimport PasswordField from '../PasswordField/PasswordField';\nimport toast from 'react-hot-toast';\nimport { registerUser } from 'redux/auth/authOperations';\n\nconst RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showPasswordRepeat, setShowPasswordRepeat] = useState(false);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      fullName: '',\n      password: '',\n      passwordRepeat: '',\n    },\n    validationSchema,\n    onSubmit: async (values, { resetForm }) => {\n      if (values.password !== values.passwordRepeat) {\n        toast('Password do not match');\n        return;\n      }\n      const userInfo = {\n        name: values.fullName,\n        email: values.email,\n        password: values.password,\n      };\n      dispatch(registerUser(userInfo));\n      resetForm();\n    },\n  });\n\n  function handleClickShowPassword() {\n    setShowPassword(prevState => {\n      return !prevState;\n    });\n  }\n  function handleClickShowPasswordRepeat() {\n    setShowPasswordRepeat(prevState => {\n      return !prevState;\n    });\n  }\n\n  return (\n    <>\n      <Typography variant=\"h3\" mt={5} textAlign=\"center\">\n        Register\n      </Typography>\n      <form\n        onSubmit={formik.handleSubmit}\n        style={{ width: '500px', margin: '0 auto' }}\n      >\n        <TextField\n          disabled={formik.isSubmitting}\n          fullWidth\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n        <TextField\n          disabled={formik.isSubmitting}\n          fullWidth\n          id=\"fullName\"\n          name=\"fullName\"\n          label=\"Full name\"\n          value={formik.values.fullName}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.fullName)}\n          helperText={formik.touched.fullName && formik.errors.fullName}\n          style={{ marginTop: '10px' }}\n        />\n        <PasswordField\n          label=\"Password\"\n          id=\"password\"\n          isSubmitting={formik.isSubmitting}\n          showPassword={showPassword}\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          handleClickShowPassword={handleClickShowPassword}\n          formikToched={formik.touched.password}\n          formikErrors={formik.errors.password}\n          style={{ marginTop: '10px' }}\n        />\n        <PasswordField\n          label=\"Repeat password\"\n          id=\"passwordRepeat\"\n          isSubmitting={formik.isSubmitting}\n          showPassword={showPasswordRepeat}\n          value={formik.values.passwordRepeat}\n          onChange={formik.handleChange}\n          handleClickShowPassword={handleClickShowPasswordRepeat}\n          formikToched={formik.touched.password}\n          formikErrors={formik.errors.password}\n        />\n        <Button\n          style={{ marginTop: '10px' }}\n          disabled={formik.isSubmitting}\n          color=\"primary\"\n          variant=\"contained\"\n          fullWidth\n          type=\"submit\"\n        >\n          register\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nexport default function RegisterView() {\n  return <RegisterForm />;\n}\n"],"names":["label","id","isSubmitting","showPassword","value","onChange","handleClickShowPassword","formikToched","formikErrors","fullWidth","variant","style","marginTop","htmlFor","disabled","type","endAdornment","position","onClick","edge","error","Boolean","yup","email","required","fullName","matches","password","min","useState","setShowPassword","showPasswordRepeat","setShowPasswordRepeat","dispatch","useDispatch","formik","useFormik","initialValues","passwordRepeat","validationSchema","onSubmit","values","resetForm","toast","userInfo","name","registerUser","Typography","mt","textAlign","handleSubmit","width","margin","TextField","handleChange","touched","errors","helperText","PasswordField","prevState","Button","color","RegisterView"],"sourceRoot":""}