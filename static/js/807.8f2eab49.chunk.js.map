{"version":3,"file":"static/js/807.8f2eab49.chunk.js","mappings":"+OAoDA,IAzCsB,SAAC,GAUhB,IATLA,EASI,EATJA,MACAC,EAQI,EARJA,GACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,aACAC,EAKI,EALJA,MACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,wBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,UAAC,IAAD,CAAaC,WAAS,EAACC,QAAQ,WAAWC,MAAO,CAAEC,UAAW,QAA9D,WACE,SAAC,IAAD,CAAYC,QAAQ,8BAApB,SAAmDb,KACnD,SAAC,IAAD,CACEc,SAAUZ,EACVD,GAAIA,EACJc,KAAMZ,EAAe,OAAS,WAC9BC,MAAOA,EACPC,SAAUA,EACVW,cACE,SAAC,IAAD,CAAgBC,SAAS,MAAzB,UACE,SAAC,IAAD,CACE,aAAW,6BACXC,QAASZ,EACTa,KAAK,MAHP,SAKIhB,GAAmC,SAAC,IAAD,KAApB,SAAC,IAAD,QAIvBH,MAAOA,EACPoB,MAAOb,GAAgBc,QAAQb,MAEjC,SAAC,IAAD,CAAgBP,GAAG,iBAAiBmB,OAAK,EAAzC,SACGb,GAAgBC,S,uKCjCzB,EAXyBc,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAEJC,MAAM,uBACNC,SAAS,qBACZC,SAAUH,EAAAA,KAEPI,IAAI,GAAI,sDACRF,SAAS,0B,wCCqEd,EAvEkB,WAChB,OAAwCG,EAAAA,EAAAA,WAAS,GAAjD,eAAOxB,EAAP,KAAqByB,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbV,MAAO,GACPE,SAAU,IAEZS,iBAAAA,EACAC,SAAS,WAAD,wBAAE,WAAOC,EAAP,4EAAiBC,EAAjB,EAAiBA,UACnBC,EAAW,CAAEf,MAAOa,EAAOb,MAAOE,SAAUW,EAAOX,UACzDI,GAASU,EAAAA,EAAAA,IAAUD,IACnBD,IAHQ,2CAAF,qDAAC,KAaX,OACE,iCACE,SAACG,EAAA,EAAD,CAAY9B,QAAQ,KAAK+B,GAAI,EAAGC,UAAU,SAA1C,oBAGA,kBACEP,SAAUJ,EAAOY,aACjBhC,MAAO,CAAEiC,MAAO,QAASC,OAAQ,UAFnC,WAIE,SAACC,EAAA,EAAD,CACEhC,SAAUiB,EAAO7B,aACjBO,WAAS,EACTR,GAAG,QACH8C,KAAK,QACL/C,MAAM,QACNI,MAAO2B,EAAOK,OAAOb,MACrBlB,SAAU0B,EAAOiB,aACjB5B,MAAOW,EAAOkB,QAAQ1B,OAASF,QAAQU,EAAOmB,OAAO3B,OACrD4B,WAAYpB,EAAOkB,QAAQ1B,OAASQ,EAAOmB,OAAO3B,MAClDsB,OAAO,YAET,SAACO,EAAA,EAAD,CACEpD,MAAM,WACNC,GAAG,WACHC,aAAc6B,EAAO7B,aACrBC,aAAcA,EACdC,MAAO2B,EAAOK,OAAOX,SACrBpB,SAAU0B,EAAOiB,aACjB1C,wBAlCR,WACEsB,GAAgB,SAAAyB,GACd,OAAQA,MAiCJ9C,aAAcwB,EAAOkB,QAAQxB,SAC7BjB,aAAcuB,EAAOmB,OAAOzB,YAE9B,SAAC6B,EAAA,EAAD,CACE3C,MAAO,CAAEC,UAAW,QACpBE,SAAUiB,EAAO7B,aACjBqD,MAAM,UACN7C,QAAQ,YACRD,WAAS,EACTM,KAAK,SANP,0BC9DO,SAASyC,IACtB,OAAO,SAAC,EAAD","sources":["components/PasswordField/PasswordField.jsx","components/LoginForm/validation.js","components/LoginForm/LoginForm.jsx","views/LoginView.jsx"],"sourcesContent":["import {\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  FormHelperText,\n} from '@mui/material';\nimport React from 'react';\nimport { VisibilityOff, Visibility } from '@mui/icons-material';\n\nconst PasswordField = ({\n  label,\n  id,\n  isSubmitting,\n  showPassword,\n  value,\n  onChange,\n  handleClickShowPassword,\n  formikToched,\n  formikErrors,\n}) => {\n  return (\n    <FormControl fullWidth variant=\"outlined\" style={{ marginTop: '10px' }}>\n      <InputLabel htmlFor=\"outlined-adornment-password\">{label}</InputLabel>\n      <OutlinedInput\n        disabled={isSubmitting}\n        id={id}\n        type={showPassword ? 'text' : 'password'}\n        value={value}\n        onChange={onChange}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleClickShowPassword}\n              edge=\"end\"\n            >\n              {!showPassword ? <VisibilityOff /> : <Visibility />}\n            </IconButton>\n          </InputAdornment>\n        }\n        label={label}\n        error={formikToched && Boolean(formikErrors)}\n      />\n      <FormHelperText id=\"my-helper-text\" error>\n        {formikToched && formikErrors}\n      </FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default PasswordField;\n","import * as yup from 'yup';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(12, 'Password should be of minimum 12 characters length')\n    .required('Password is required'),\n});\n\nexport default validationSchema;\n","import { useState } from 'react';\nimport { useFormik } from 'formik';\nimport { Button, TextField, Typography } from '@mui/material';\nimport validationSchema from './validation';\nimport PasswordField from '../PasswordField/PasswordField';\nimport { useDispatch } from 'react-redux';\nimport { loginUser } from 'redux/auth/authOperations';\n\nconst LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema,\n    onSubmit: async (values, { resetForm }) => {\n      const userInfo = { email: values.email, password: values.password };\n      dispatch(loginUser(userInfo));\n      resetForm();\n    },\n  });\n\n  function handleClickShowPassword() {\n    setShowPassword(prevState => {\n      return !prevState;\n    });\n  }\n\n  return (\n    <>\n      <Typography variant=\"h3\" mt={5} textAlign=\"center\">\n        Login\n      </Typography>\n      <form\n        onSubmit={formik.handleSubmit}\n        style={{ width: '500px', margin: '0 auto' }}\n      >\n        <TextField\n          disabled={formik.isSubmitting}\n          fullWidth\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n          margin=\"normal\"\n        />\n        <PasswordField\n          label=\"Password\"\n          id=\"password\"\n          isSubmitting={formik.isSubmitting}\n          showPassword={showPassword}\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          handleClickShowPassword={handleClickShowPassword}\n          formikToched={formik.touched.password}\n          formikErrors={formik.errors.password}\n        />\n        <Button\n          style={{ marginTop: '10px' }}\n          disabled={formik.isSubmitting}\n          color=\"primary\"\n          variant=\"contained\"\n          fullWidth\n          type=\"submit\"\n        >\n          login\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from '../components/LoginForm/LoginForm';\n\nexport default function LoginView() {\n  return <LoginForm />;\n}\n"],"names":["label","id","isSubmitting","showPassword","value","onChange","handleClickShowPassword","formikToched","formikErrors","fullWidth","variant","style","marginTop","htmlFor","disabled","type","endAdornment","position","onClick","edge","error","Boolean","yup","email","required","password","min","useState","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","userInfo","loginUser","Typography","mt","textAlign","handleSubmit","width","margin","TextField","name","handleChange","touched","errors","helperText","PasswordField","prevState","Button","color","LoginView"],"sourceRoot":""}